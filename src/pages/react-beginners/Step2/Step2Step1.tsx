import { Typography } from "@mui/material";

import { BackForwardButtons } from "../../../components/BackForwardButtons";
import { CodeEditor } from "../../../components/CodeEditor";

export const Step2Step1 = ({
  setActiveStep,
}: {
  setActiveStep: (step: number) => void;
}) => {
  return (
    <>
      <Typography>
        Представим, что мы составляем механизм, который мы сможем запустить и он
        облегчит жизнь другим людям или сделает их жизнь приятней. Этот механизм
        - и есть наше веб-приложение
      </Typography>
      <Typography>
        Для составления механизма нам нужна коробка с деталями. В это коробке
        лежат разные детали, с которыми можно выполнять разные штуки. Эти штуки
        разделяются на разные группы. Со штуками в одних группах можно выполнять
        похожие действия
      </Typography>
      <Typography>
        Группы - это штуки с одним типом данных. Всего в JavaScript есть
        несколько типов данных. Наиболее часто мы будем использовать следущие
        типы:
      </Typography>
      <ol>
        <li>Строки: "Иван", "Ваш заказ оформлен"</li>
        <li>
          Числа: 485 (без кавычек записываются, если записать в кавычках, будет
          уже строка)
        </li>
        <li>Логические значения: true, false</li>
        <li>
          Объекты: сложный тип данных, похожий на коробку или собранный механизм
          внутри нашей коробки
        </li>
        <li>
          undefined: особый тип значения, который имеет лишь 1 возможное
          значение - undefined. Это когда мы хотели вытащить что-то из нашей
          коробки, а оказалось, что этого нет в ней
        </li>
        <li>
          null: особый тип значения, который имеет лишь 1 возможное значение -
          null (пустота, ничто). Разберем ее чуть позже
        </li>
      </ol>
      <Typography>
        Так как наша коробка - виртуальная, то мы можем дать штукам ярлыки и
        когда мы будем использовать эти ярлыки, в реальности будут
        использоваться штуки, на которые эти ярлыки ссылаются. Давайте создадим
        дадим ярлык какой-нибудь штуке-строке. Есть 2 способа сделать это:
      </Typography>
      <CodeEditor
        code={`// переменная (а если корректнее, то константа), значение нельзя менять.\n// Этот вариант создания переменной будет использоваться почти всегда в React.js\nconst someName = "Олег Смирнов";\n\n// "let" - переменная, значение которой можно менять
let otherName = "Ольга Иванова";\n\n// вот каким образом меняется ее значение:\notherName = "Ольга Петрова";`}
      />
      <Typography>
        <code>const</code> - это указатель для языка "сейчас мы будем давать
        этому ярлыку такое-то значение"
      </Typography>
      <Typography>
        Давайте создадим переменные числа и логические значения:
      </Typography>
      <CodeEditor code={`const age = 23;\nconst isStudent = true;`} />
      <Typography>
        Объекты выглядят посложней. Давайте попробуем создать объект, содержащий
        в себе всю информацию, которую мы создали ранее
      </Typography>
      <CodeEditor
        code={`const person = {
  name: "Анастасия Ивановна",
  age: 23,
  isStudent: true
};`}
      />
      <Typography>
        Или же пустой объект (пустая коробка в нашей коробке)
      </Typography>
      <CodeEditor code={`const emptyObject = {};`} />
      <Typography>
        Преимущество объекта - содержит всю информацию в одном месте (в одном
        ярлыке). Можно определить, какие поля должен содержать объект и создать
        много таких объектов
      </Typography>
      <BackForwardButtons onHandleForward={() => setActiveStep(1)} />
    </>
  );
};
